using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Telegram.Bot.Callbacks.Generator
{
    [Generator]
    public class CallbackGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var interfaceDeclarations = context.SyntaxProvider.CreateSyntaxProvider(
                    (node, token) =>
                    {
                        var ids = node as InterfaceDeclarationSyntax;
                        return ids?.BaseList != null;
                    },
                    (syntaxContext, token) =>
                    {
                        var interfaceDecl = (InterfaceDeclarationSyntax)syntaxContext.Node;
                        var model = syntaxContext.SemanticModel;
                        if (!(model.GetDeclaredSymbol(interfaceDecl, token) is INamedTypeSymbol symbol)) return null;

                        return Enumerable.Any(symbol.Interfaces,
                            iNamedSymbol => iNamedSymbol.ToDisplayString() == "Telegram.Bot.Callbacks.ICallbackable")
                            ? symbol
                            : null;
                    })
                .Where(symbol => symbol != null);

            var interfaceSymbols = interfaceDeclarations.Collect();

            context.RegisterSourceOutput(interfaceSymbols, (spc, interfaces) =>
            {
                var sb = new StringBuilder();
                sb.AppendLine("// <auto-generated>");
                sb.AppendLine("// Сгенерированный класс и методы, формирующие строки для CallbackQuery.");
                sb.AppendLine("// </auto-generated>");
                sb.AppendLine("namespace Callbacks");
                sb.AppendLine("{");

                foreach (var iface in interfaces)
                {
                    var interfaceName = iface.Name;
                    sb.AppendLine($"    public static class {interfaceName}");
                    sb.AppendLine("    {");

                    foreach (var member in iface.GetMembers().OfType<IMethodSymbol>())
                    {
                        if (!member.ReturnType.Name.Equals("Task", StringComparison.Ordinal) ||
                            member.Parameters.Length == 0 ||
                            member.Parameters[0].Type.ToDisplayString() != "Telegram.Bot.Types.CallbackQuery")
                            continue;

                        var methodName = member.Name;
                        var parameters = new List<string>();
                        var formattedArgs = new List<string>();

                        // перебор параметров с 1 (без CallbackQuery)
                        for (var i = 1; i < member.Parameters.Length; i++)
                        {
                            var p = member.Parameters[i];
                            parameters.Add($"{p.Type.ToDisplayString()} {p.Name}");

                            if (p.Type.SpecialType == SpecialType.System_Boolean)
                            {
                                formattedArgs.Add($"({p.Name} ? \"1\" : \"0\")");
                            }
                            else if (p.Type.TypeKind == TypeKind.Enum)
                            {
                                formattedArgs.Add($"(((int){p.Name}).ToString())");
                            }
                            else
                            {
                                formattedArgs.Add($"{p.Name}.ToString()");
                            }
                        }

                        var parameterList = string.Join(", ", parameters);
                        var argsJoined = formattedArgs.Count > 0
                            ? string.Join(" + \"|\" + ", formattedArgs)
                            : string.Empty;

                        sb.AppendLine($"        public static string {methodName}({parameterList})");
                        sb.AppendLine("        {");
                        sb.AppendLine("         return Telegram.Bot.Callbacks.CallbackCodeStorage" +
                                      $".TypeToServiceCode[typeof({iface.ToDisplayString()})] + \":\" +");
                        sb.AppendLine("             Telegram.Bot.Callbacks.CallbackCodeStorage" +
                                      $".CodeByInterfaceAndMethodInfo[(typeof({iface.ToDisplayString()}), " +
                                      $"typeof({iface.ToDisplayString()}).GetMethod(\"{methodName}\"))] + ");
                        sb.AppendLine($"                {(string.IsNullOrEmpty(argsJoined) ? "\"\"" : "\":\" + " + argsJoined)};");
                        sb.AppendLine("        }");
                    }

                    sb.AppendLine("    }");
                }

                sb.AppendLine("}");
                spc.AddSource("Callbacks.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
            });
        }
    }
}